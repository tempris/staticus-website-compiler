'use strict';

var cheerio = require('cheerio');
var extend = require('extend-shallow');
var slugify = require('markdown-slug');
var escape = require('escape-html');

module.exports = function(str, options) {
  if (typeof str !== 'string') {
    throw new TypeError('expected a string');
  }

  var opts = extend({
    selectors: 'h1,h2',
    id: '#toc',
    linkClass: 'toc__link',
    slugger: slugify,
    header: '',
    parentLink: true,
    collapsible: true,
    maxDepth: 6, // Controls max depth for TOC links
    anchorMaxDepth: 6, // Controls max depth for anchors
    headerPrependMaxDepth: 6 // New: Controls max depth for headerPrepends
  }, options);

  var $ = opts.$ || cheerio.load(str);

  // get all the anchor tags from inside the headers
  var headings = $(opts.selectors);
  var firstHeading = headings.first()[0];
  if (!firstHeading) return str;

  var base = +firstHeading.name.slice(1);
  var navigation = [];
  var slugs = {};

  function findLocation(navigation, depth) {
    if (depth <= 0) {
      return navigation;
    }
    var loc = navigation[navigation.length - 1];
    if (!loc) {
      loc = { children: [] };
      navigation.push(loc);
    } else if (!loc.children) {
      loc.children = [];
    }
    return findLocation(loc.children, depth - 1);
  }

  headings.map(function(i, ele) {
    var $ele = $(ele);
    // var level = +ele.name.slice(1);

    // if (level > opts.maxDepth) return; // Skip headings beyond max depth

    var text = $ele.text().trim();
    if (!text) return;

    var slug = opts.slugger(text, { cache: slugs });
    var node = {
      text: text,
      link: slug,
      level: +ele.name.slice(1) - base,
      $ele: $ele
    };

    var location = findLocation(navigation, node.level);
    location.push(node);
  });

  function buildHTML(navigation, first, sParentLink) {
    return navigation.map(function(loc) {
      if (!loc || !loc.link) return '';

      var visible_children = loc.level + 1 < opts.maxDepth && loc.children;

      // Build the HTML for the current header
      var headerHTML = '<a class="' + opts.linkClass + '" href="#' + loc.link + '">' + escape(loc.text) + '</a>';

      // Build list item or collapsible item
      if (opts.collapsible) {
        // Collapsible list
        return (visible_children ? '<details class="nav' + (first ? ' sidenav' : '') + '"><summary>' : '') 
          + headerHTML
          + (visible_children ? '</summary>' + buildHTML(loc.children, false, loc.link) + '</details>' : '');
      } else {
        // Simple list
        return '<li>'
          + headerHTML
          + (visible_children ? '<ul>' + buildHTML(loc.children, false, loc.link) + '</ul>' : '')
          + '</li>';
      }
    }).join('\n');
  }

  function addID(navigation, sParentLink) {
    navigation.forEach(function(loc) {
      if (!loc || !loc.link || loc.level >= opts.anchorMaxDepth) return; // Skip adding ID beyond anchor max depth
      loc.link = (opts.parentLink && sParentLink ? sParentLink + '-' : '') + loc.link;
      loc.$ele.attr('id', loc.link);
      if (loc.children) addID(loc.children, loc.link);
    });
  }

  addID(navigation);
  $(opts.id).append(opts.header);
  $(opts.id).append(buildHTML(navigation, true));

  headings.map(function(i, ele) {
    var $ele = $(ele);
    var id = $ele.attr('id');
    var level = +ele.name.slice(1); // Extract the heading level (h1 -> 1, h2 -> 2, etc.)

    // Skip adding the anchor if the heading level exceeds anchorMaxDepth
    if (level > opts.anchorMaxDepth) return;

    // Anchor template
    $ele.append(anchorTemplate(id, opts));

    if ($ele.prev().children().hasClass('source-link')) {
      var sourceLink = $ele.prev().children('.source-link');
      $ele.append(sourceLink);
    }
  });

  $(opts.headerPrependSelectors || opts.selectors).map(function(i, ele) {
    var $ele = $(ele);
    var id = $ele.attr('id');
    var level = +ele.name.slice(1);

    if (level > opts.headerPrependMaxDepth) return; // Skip headerPrepends beyond max depth

    // Header prepend
    $(this).prepend(headerPrepend(id, opts));
  });

  return $.html();
};

function headerPrepend(id, options) {
  if (options.headerPrepend === false) {
    return '';
  }

  if (typeof options.headerPrepend === 'function') {
    return options.headerPrepend(id);
  }

  if (options.headerPrepend !== undefined) {
    return options.headerPrepend;
  }

  return '';
}

function anchorTemplate(id, options) {
  if (options.anchorTemplate === false) {
    return '';
  }

  if (typeof options.anchorTemplate === 'function') {
    return options.anchorTemplate(id);
  }

  return '<a href="#' + id + '" name="' + id + '" class="anchor">\n'
  + '  <span class="anchor-target" id="' + id + '"></span>\n'
  + '  <span class="glyphicon glyphicon-link"></span>\n'
  + '</a>';
}
