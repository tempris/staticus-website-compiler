'use strict';

var through = require('through2');
var PluginError = require('plugin-error');
var toc = require('custom-html-toc');
var cheerio = require('cheerio');

/**
 * Add navigation to page
 */

module.exports = function(options) {
  return through.obj(function(file, enc, next) {
    if (file.isNull()) {
      next(null, file);
      return;
    }

    try {
      if (options.ignoreFiles) {
        const fileName = file.relative; // Full file name with extension
        const fileBaseName = fileName.replace(/\.html$/, ''); // File name without extension

        if (options.ignoreFiles.includes(fileName) || options.ignoreFiles.includes(fileBaseName)) {
          if (options.debug) console.log(`Skipping TOC generation for file: ${file.relative}`);
          next(null, file); // Skip processing this file
          return;
        }
      }

      var str = file.contents.toString(); // MAYBE: Content-Based Skip

      // Remove HTML comments
      var $ = cheerio.load(str, { decodeEntities: false });
      $('*').contents().each(function() {
        if (this.type === 'comment') {
          $(this).remove();
        }
      });

      var cleanedHtml = $.html();

      // Check if the string contains only one <h1> element
      var h1Count = (cleanedHtml.match(/<h1[^>]*>/g) || []).length;
      var headingCount = (cleanedHtml.match(/<h[1-6][^>]*>/g) || []).length;

      if (h1Count === 0 || headingCount < 2) {
        next(null, file);
        return;
      }

      str = str.replace( options.replaceText ? options.replaceText : '<!-- toc -->', replaceTextTemplate( options ) );

      file.contents = Buffer.from(toc(str, options));
    } catch (err) {
      this.emit('error', new PluginError('gulp-html-toc', err, {fileName: file.path}));
      return;
    }

    next(null, file);
  });
};

function replaceTextTemplate( options ) {
  if (typeof options.replaceTextTemplate === 'function') {
    return options.replaceTextTemplate();
  }

  return '<div id="toc"></div>';
}
