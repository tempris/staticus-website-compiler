function performTask() {
  return new Promise((resolve) => {
    console.log("A string logged in JS.");
    console.log("Another string logged in JS.");
    setTimeout(() => {
      console.log("A delayed string logged in JS.");
      resolve();
    }, 3000);
  });
}

/**
 * Calculates the sum of an array of numbers with an optional multiplier.
 *
 * @param {Array<number>} numbers - The array of numbers to sum. Defaults to [1, 2, 3].
 * @param {number} multiplier - A number to multiply the sum by. Defaults to 1.
 * @returns {number} - The calculated sum.
 */
async function calculateSum(numbers = [1, 2, 3], multiplier = 1) {
  if (!Array.isArray(numbers) || numbers.some(isNaN)) {
    throw new Error("Invalid input: 'numbers' should be an array of numbers.");
  }
  if (typeof multiplier !== 'number') {
    throw new Error("Invalid input: 'multiplier' should be a number.");
  }

  const sum = numbers.reduce((acc, num) => acc + num, 0);
  return sum * multiplier;
}

/**
 * Returns a string wrapped in ANSI escape codes for the specified color.
 *
 * @param {string} text - The text to colorize.
 * @param {string} color - The color name (e.g., "red", "green", "yellow", etc.).
 * @returns {string} - The colorized string with ANSI escape codes.
 */
function getAnsiString(text, color) {
  const ansiColors = {
    black: "\x1b[30m",
    red: "\x1b[31m",
    green: "\x1b[32m",
    yellow: "\x1b[33m",
    blue: "\x1b[34m",
    magenta: "\x1b[35m",
    cyan: "\x1b[36m",
    white: "\x1b[37m",
    reset: "\x1b[0m"  // Resets to default color
  };

  // Check if the provided color exists, otherwise use reset
  const colorCode = ansiColors[color.toLowerCase()] || ansiColors.reset;
  
  return `${colorCode}${text}${ansiColors.reset}`;
}

// Export the function for use in Node.js
module.exports = { calculateSum, getAnsiString };

// Example usage for testing in the terminal:
// Run with `node index.js` to see default output
if (require.main === module) {
  // Run the script and exit gracefully
  performTask().then(() => {
    console.log("Task complete. Exiting...");
    process.exit(0);  // Indicating successful completion
  }).catch((err) => {
    console.error("Error occurred:", err);
    process.exit(1);  // Indicating an error
  });

  // calculateSum().then(console.log).catch(console.error);
}