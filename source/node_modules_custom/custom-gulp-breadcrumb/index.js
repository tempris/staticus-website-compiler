const PLUGIN_NAME = 'gulp-breadcrumb';
const through = require('through2');
const path = require('path');

module.exports = function (options) {
    "use strict";

    const normalizeToUnix = (p) => p.split(path.sep).join('/'); // Consistent delimiter for regex

    const trimToRelevantPath = (filePath, basePath) => {
        const normalizedFilePath = normalizeToUnix(filePath);
        const normalizedBasePath = normalizeToUnix(basePath);

        const regex = new RegExp(`^.*${normalizedBasePath}/?`);
        const relevantPath = normalizedFilePath.replace(regex, '');

        return relevantPath;
    };

    const crumb = (route, options, name) => {
        options = options || {};
        options.rootHTML = options.rootHTML || 'Home';
        options.basePath = path.normalize(options.basePath || '');

        if (!route) {
            route = 'error/no/route/passed/to/gulp-breadcrumb/bail/out/skipper';
            console.warn('[WARN] No route provided. Using fallback route:', route);
        }

        route = path.normalize(route);

        if (!path.isAbsolute(options.basePath)) {
            options.basePath = path.resolve(process.cwd(), options.basePath);
        }

        const relevantParts = trimToRelevantPath(route, options.basePath).split('/');

        let results = '';

        if (options.containerElem) {
            results += `<${options.containerElem}${options.containerElemProps ? ' ' + options.containerElemProps : ''}>`;
        }

        results += `<nav aria-label="breadcrumb">
                    <ol class="breadcrumb">
                    <li class="breadcrumb-item"><a${options.linkProps ? ' ' + options.linkProps : ''} href="/" title="Home">${options.rootHTML}</a></li>`;

        let breadcrumbPath = options.pathPrefix || '';

        relevantParts.forEach((part, index) => {
            breadcrumbPath += `/${part}`;
            const extension = part.split('.');

            if (extension.length < 2) {
                results += `<li class="breadcrumb-item">
                            <a${options.linkProps ? ' ' + options.linkProps : ''} href="${breadcrumbPath}${options.pathSuffix || ''}">${titleCase(extension[0])}</a>
                            </li>`;
            } else if (options.showPageName === true) {
                results += `<li class="breadcrumb-item active"><span>${name !== '' ? name : titleCase(extension[0].replace(/\W|_/g, ' '))}</span></li>`;
            }
        });

        results += '</ol></nav>';

        if (options.containerElem) results += `</${options.containerElem}>`;

        return results;
    };

    const titleCase = (string) => {
        const splitString = string.toLowerCase().replace(/_/g, ' ').split(' ');
        const result = splitString
            .map((word) => word.charAt(0).toUpperCase() + word.substring(1))
            .join(' ');
        return result;
    };

    const cb = function (file, enc, callback) {
        try {
            if (!file.contents || !(file.contents instanceof Buffer)) {
                throw new Error(`[ERROR] Invalid file contents for file: ${file.relative}`);
            }

            // Check if the file should be ignored
            if (options.ignoreFiles) {
                const fileName = file.relative; // Full file name with extension
                const fileBaseName = fileName.replace(/\.html$/, ''); // File name without extension

                if (options.ignoreFiles.includes(fileName) || options.ignoreFiles.includes(fileBaseName)) {
                    if (options.debug) {
                        console.log(`Breadcrumb: Skipping file: ${file.relative}`);
                    }
                    callback(null, file); // Skip processing this file
                    return;
                }
            }

            let str = file.contents.toString(); // Initialize str early

            const relevantPath = trimToRelevantPath(file.path, options.basePath);
            const routeParts = relevantPath.split('/');

            const pageName = options.showPageName === true && options.useHeaderAsPageName === true
                // ? str.match(/<h1>(.*)<\/h1>/)?.[1]?.replace(/<h1>|<\/h1>/g, '') || ''
                ? str.match(/<h1[^>]*>(.*?)<\/h1>/)?.[1]?.replace(/<[^>]+>/g, '') || ''
                : '';

            const bc = crumb(file.path, options, pageName);

            str = str.replace(options.replaceText ? options.replaceText : '<!-- breadcrumb -->', bc);

            file = file.clone();
            file.contents = Buffer.from(str);

            this.push(file);
            callback();
        } catch (err) {
            console.error(`[ERROR] Error processing file: ${file.relative}`, err);
            callback(err);
        }
    };

    return through.obj(cb);
};
